---
import Layout from "../components/Layout.astro";

/** HERO COPY */
const hero = {
  title: "3D Artworks",
  subtitle: "Charecter • Environment • Objects",
  blurb:
    "มีความสามารถในการปั้น Model 3D ในโปรแกรม Blender และ Maya ในระดับพื้นฐาน และตอนนี้ก็กำลังสนใจการใช้ ZBrush ในการทำโมเดล",
};

/** FILTER TAGS (must match artworks[].tag exactly) */
const tags = [ "All", "Charecter", "Diorama", "Objects" ];

/** GALLERY DATA */
const artworks = [
  { title: "Alien", img: "../img/3D/alien_charecter.png", tag: "Charecter" },
  { title: "Monolith Reboot", img: "../img/3D/beach houes_diorama.jpg", tag: "Diorama" },
  { title: "Tesseract Node", img: "../img/3D/coffe_objects.png", tag: "Objects" },
  { title: "Scarab Bay", img: "../img/3D/dragon skull tunnel_diorama.jpg", tag: "Diorama" },
  { title: "Obelisk Study", img: "../img/3D/dragon skull_diorama.jpg", tag: "Diorama" },
  { title: "Conduit Array", img: "../img/3D/Dragon skull2.jpg", tag: "Objects" },
  { title: "Conduit Array", img: "../img/3D/dream room_diorama.jpg", tag: "Diorama" },
  { title: "Conduit Array", img: "../img/3D/house in the middle of the sea_diorama.jpg", tag: "Diorama" },
  { title: "Conduit Array", img: "../img/3D/house on the is land_diorama.jpg", tag: "Diorama" },
  { title: "Conduit Array", img: "../img/3D/knife_objects.png", tag: "Objects" },
  { title: "Conduit Array", img: "../img/3D/monster_charecter.jpg", tag: "Charecter" },
  { title: "Conduit Array", img: "../img/3D/room_diorama.jpg", tag: "Diorama" },
];

const base = import.meta.env.BASE_URL || "/";
const url = (p = "/") => `${base}${String(p).replace(/^\/+/, "")}`;
const encode = (p = "/") => url(p).replace(/ /g, "%20");
---

<style>
  /* ===== THEME TOKENS FOR CHIPS (outlined default, filled active) ===== */
  :root{
    --chip-text:            #EAFDF4;
    --chip-border:          rgba(12,229,134,.55);
    --chip-border-hover:    rgba(12,229,134,.75);
    --chip-bg:              transparent;
    --chip-bg-hover:        rgba(12,229,134,.08);
    --chip-bg-active:       rgba(12,229,134,.22);
  }

  /* ===== HERO ===== */
  .hero-grid { display:grid; grid-template-columns: 1.1fr 1fr; gap:2rem; align-items:center; }
  @media (max-width: 992px){ .hero-grid { grid-template-columns: 1fr; } }
  .hero-art { position:relative; border-radius:16px; overflow:hidden; }
  .hero-art img { width:100%; height:100%; object-fit:cover; display:block; }

  /* ===== CHIPS ===== */
  .chip{
    display:inline-flex; align-items:center; justify-content:center;
    padding:.48rem .98rem; margin:.25rem .35rem .25rem 0;
    border-radius:999px; border:1px solid var(--chip-border);
    background: var(--chip-bg); color: var(--chip-text);
    cursor:pointer; user-select:none;
    transition: background-color .18s ease, border-color .18s ease, color .18s ease, transform .18s ease, box-shadow .18s ease;
  }
  .chip:hover{ background: var(--chip-bg-hover); border-color: var(--chip-border-hover); }
  .chip:focus-visible{ outline:2px solid var(--chip-border-hover); outline-offset:2px; }
  .chip.is-active{
    background: var(--chip-bg-active);
    border-color: var(--chip-border-hover);
    transform: translateY(-1px);
    box-shadow: 0 0 0 4px rgba(12,229,134,.06);
  }

  /* ===== SECTION SURFACE ===== */
  .band { background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,0)); border-radius:16px; }

  /* ===== CARDS ===== */
  .card-necron-dark {
    background: rgba(16,18,20,.86);
    border:1px solid rgba(12,229,134,.18);
    border-radius:14px; overflow:hidden;
    transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
    height:100%;
  }
  .card-necron-dark:hover {
    transform: translateY(-3px);
    border-color: rgba(12,229,134,.38);
    box-shadow: 0 0 24px rgba(12,229,134,.18);
  }
  .media { width:100%; aspect-ratio: 16/9; object-fit:cover; display:block; opacity:.9; }
  .body { padding:1rem 1.1rem 1.25rem; }
  .tag { font-size:.78rem; letter-spacing:.06em; text-transform:uppercase; color:#3dffae; }

  /* ===== FILTER ANIMATION HELPERS ===== */
  .gallery-card{ transition: transform .24s ease, opacity .24s ease; }
  .is-hidden{ opacity:0; transform: translateX(-24px); pointer-events:none; position:absolute; }
</style>

<Layout title={`Tanawat // ${hero.title}`} description={hero.subtitle}>
  <!-- HERO -->
  <section class="panel p-4 p-lg-5 mb-5">
    <div class="hero-grid">
      <div class="hero-art">
        <img src="../img/3D/profile 3d.png" alt="3D hero placeholder" loading="lazy" />
      </div>
      <div>
        <h2 class="text-muted m-0">{hero.subtitle}</h2>
        <h1 class="necron-glow m-0">{hero.title}</h1>
        <p class="mt-3 mb-4">{hero.blurb}</p>

        <!-- FILTER CHIPS (buttons with data-filter) -->
        <div id="threeFilter" aria-label="Tags">
          {tags.map((t, i) => (
            <button class={`chip ${i === 0 ? "is-active" : ""}`} data-filter={t} aria-pressed={i === 0 ? "true" : "false"}>
              {t}
            </button>
          ))}
        </div>
      </div>
    </div>
  </section>

  <!-- GALLERY -->
  <section class="band panel p-4 p-lg-5 mb-5">
    <div class="row g-3 g-lg-4" id="threeGrid">
      {artworks.map((a) => (
        <div class="col-12 col-md-6 col-lg-4 gallery-card" data-tag={a.tag}>
          <div class="card-necron-dark">
            <img class="media" src={a.img} alt={a.title} loading="lazy" />
            <div class="body">
              <h5 class="mb-1">{a.title}</h5>
              <div class="tag mb-2">{a.tag}</div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </section>

  <!-- FILTER LOGIC -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const group = document.getElementById("threeFilter");
      const chips = group?.querySelectorAll(".chip") ?? [];
      const cards = document.querySelectorAll("#threeGrid .gallery-card");
      if (!chips.length || !cards.length) return;

      const activate = (el) => {
        chips.forEach(c => { c.classList.remove("is-active"); c.setAttribute("aria-pressed","false"); });
        el.classList.add("is-active");
        el.setAttribute("aria-pressed","true");
      };

      const apply = (filter) => {
        cards.forEach(card => {
          const tag = card.getAttribute("data-tag");
          const show = filter === "All" || tag === filter;
          card.style.position = show ? "" : "absolute"; // reduce layout jump during transition
          card.classList.toggle("is-hidden", !show);
        });
      };

      chips.forEach(chip => {
        chip.setAttribute("role","button");
        chip.addEventListener("click", () => {
          activate(chip);
          apply(chip.getAttribute("data-filter"));
        });
      });

      // default state
      const current = [...chips].find(c => c.classList.contains("is-active")) || chips[0];
      if (current) { activate(current); apply(current.getAttribute("data-filter")); }
    });
  </script>
</Layout>
